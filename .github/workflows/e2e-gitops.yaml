name: "Run SAST, Build and push supermario image, scan image, Update deployment and version txt files"
 
on:
  push:
    branches:
      - main
 
env:
  VERSION: $(( $(cat version.txt) + 1 ))

permissions:
  contents: read
  security-events: write

concurrency:
  group: trivy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
jobs: 
  sonarqube_sast_scan:
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis relevance
 
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - name: SonarQube Quality Gate Check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  
  build_push_supermario_docker_image:
    runs-on: ubuntu-latest
    needs: sonarqube_sast_scan
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
  
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
 
      - name: Build and Push Docker Image
        run: |
          docker build -t docker.io/monicamarshall/supermario-aks:${{ env.VERSION }} .
          docker push docker.io/monicamarshall/supermario-aks:${{ env.VERSION }}
 
  trivy-image-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Read version.txt after checkout and export as env.VERSION
      - name: Read version from file
        id: version
        run: |
          if [ ! -f version.txt ]; then echo "version.txt not found"; exit 1; fi
          v=$(tr -d '\r' < version.txt)
          echo "VERSION=$v" >> "$GITHUB_ENV"
          echo "Using VERSION=$v"

      - name: Docker Hub login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull image to ensure it exists
        run: docker pull docker.io/monicamarshall/supermario-aks:${{ env.VERSION }}

      # 1) Scan to SARIF (do not stop the job yet so we can upload the report)
      - name: Trivy scan (SARIF for Security tab)
        id: trivy_sarif
        uses: aquasecurity/trivy-action@0.24.0
        continue-on-error: true
        with:
          image-ref: docker.io/monicamarshall/supermario-aks:${{ env.VERSION }}
          vuln-type: os,library
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '1'          # mark this step as failure if findings
          format: sarif
          output: trivy.sarif
          hide-progress: true

      # 2) Run again to print a readable table in the job log
      - name: Trivy scan (table output for logs)
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: docker.io/monicamarshall/supermario-aks:${{ env.VERSION }}
          vuln-type: os,library
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '0'          # do not fail here; we only want log output
          format: table
          hide-progress: true

      # 3) Publish SARIF so it appears under Security -> Code scanning alerts
      - name: Upload SARIF to Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      # (Optional) Keep a copy as an artifact
      - name: Save SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif
          path: trivy.sarif

      # 4) Enforce the quality gate after uploading/printing reports
      #Pass the scan despite critical vulnerabilities found.  Set Exit code to 0
      - name: Fail if vulnerabilities were found
        if: steps.trivy_sarif.outcome == 'failure'
        run: |
          echo "High/Critical vulnerabilities detected by Trivy. Failing the job."
          exit 0

          
  update_k8s_yaml_version_file_with_latest_image_tag:
    runs-on: ubuntu-latest
    needs: build_push_supermario_docker_image
    env:
      VERSION: ${{ needs.build_push_supermario_docker_image.outputs.version }}  # <-- consumed from the build job
    steps:
      # Checkout the TARGET manifests repo (not the current repo)
      - name: Checkout target manifests repo
        uses: actions/checkout@v4
        with:
          repository: your-org/deploy-mario-docker-image-on-azure-k8s-using-argocd-gitops-repo
          ref: main
          token: ${{ secrets.REPO_PUSH_TOKEN }}

      - name: Configure git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Bump image tag & version.txt
        run: |
          set -euo pipefail
          # Ensure we have latest
          git pull --rebase origin main

          # Update deployment.yaml image tag
          sed -i 's|image: monicamarshall/supermario-aks:.*$|image: monicamarshall/supermario-aks:'"${VERSION}"'|' deployment.yaml

          # Update version.txt
          echo "${VERSION}" > version.txt

          # Commit only if there are changes
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git add deployment.yaml version.txt
          git commit -m "Bump image tag to ${VERSION}"
          git push origin HEAD:main
