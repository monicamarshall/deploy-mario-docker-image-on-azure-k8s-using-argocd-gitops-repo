# superseds .github/workflows/gitops-build-push-supermario-image.yaml
#
# Why: The old workflow only builds and pushes a new Docker image tag
# (VERSION) to Docker Hub. It does NOT update the Kubernetes manifest
# (deployment.yaml) with the new tag.
#
# In Argo CD (pull-based GitOps), deployments are driven by Git changes,
# not by images appearing in the registry. If deployment.yaml doesn’t
# change, Argo CD sees no drift and won’t roll out the new image.
#
# The new e2e-gitops.yaml fixes this by:
#   1) bumping version.txt,
#   2) updating deployment.yaml to the new image tag,
#   3) committing those changes to the manifests repo/branch watched by Argo CD.
#
# Result: Argo CD detects the Git change and (with Auto-Sync enabled)
# applies the new image to the cluster.
# GitHub Actions run on repo events (like push to main) as defined in your workflow on: block.
# Argo CD continuously (or via webhook) watches the Git repo/branch+path 
# configured in the Argo CD Application. When a commit changes manifests 
# (like deployment.yaml), Argo CD detects it and:
# If Auto-Sync is ON → it deploys automatically.
# If Auto-Sync is OFF → it shows “OutOfSync” and you click Sync (or run argocd app sync).
# “If we don’t update deployment.yaml with the new image tag (old action) Argo CD 
# keeps the previously committed image/tag. No Git change → no new deploy.
# If the workflow only pushes a new image tag to DockerHub but doesn’t change deployment.yaml, 
# the new image is in Docker Hub but not deployed by Argo CD. 
# That’s why your new e2e-gitops.yaml commits the tag change to Git (sed substitution command).

name: Run SAST, Build & Push, Scan Image, Update Manifests

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

concurrency:
  group: trivy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  sonarqube_sast_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v4
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN:     ${{ secrets.SONAR_TOKEN }}

  build_push_supermario_docker_image:  
    runs-on: ubuntu-latest
    needs: sonarqube_sast_scan
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute version
        id: ver
        shell: bash
        run: |
          v=0
          if [ -f version.txt ]; then v=$(tr -d '\r' < version.txt); fi
          new=$((v + 1))
          echo "$new" > version.txt
          echo "version=$new" >> "$GITHUB_OUTPUT"
          echo "Using version=$new"

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build & push image
        run: |
          docker build -t docker.io/monicamarshall/supermario-aks:${{ steps.ver.outputs.version }} .
          docker push docker.io/monicamarshall/supermario-aks:${{ steps.ver.outputs.version }}

  trivy-image-scan:
    runs-on: ubuntu-latest
    needs: build_push_supermario_docker_image
    env:
      VERSION: ${{ needs.build_push_supermario_docker_image.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Hub login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull image to ensure it exists
        run: docker pull docker.io/monicamarshall/supermario-aks:${{ env.VERSION }}

      - name: Trivy scan (SARIF)
        id: trivy_sarif
        uses: aquasecurity/trivy-action@0.24.0
        continue-on-error: true
        with:
          image-ref: docker.io/monicamarshall/supermario-aks:${{ env.VERSION }}
          vuln-type: os,library
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '1'
          format: sarif
          output: trivy.sarif
          hide-progress: true

      - name: Trivy scan (table)
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: docker.io/monicamarshall/supermario-aks:${{ env.VERSION }}
          vuln-type: os,library
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '0'
          format: table
          hide-progress: true

      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      - name: Save SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif
          path: trivy.sarif

      - name: Fail if vulnerabilities were found
        if: steps.trivy_sarif.outcome == 'failure'
        run: |
          echo "High/Critical vulnerabilities detected by Trivy."
          exit 0  # set to 0 if you want to pass temporarily

  update_k8s_yaml_version_file_with_latest_image_tag:
    runs-on: ubuntu-latest
    needs: [build_push_supermario_docker_image, trivy-image-scan]
    env:
      # VERSION comes from the build job output
      VERSION: ${{ needs.build_push_supermario_docker_image.outputs.version }}
    steps:

      - name: Checkout target manifests repo
        uses: actions/checkout@v4
        with:
          repository: monicamarshall/deploy-mario-docker-image-on-azure-k8s-using-argocd-gitops-repo
          ref: main
          persist-credentials: false

      - name: Configure git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Bump image tag & version.txt
        shell: bash
        env:
          PUSH_URL: https://x-access-token:${{ secrets.REPO_PUSH_TOKEN }}@github.com/monicamarshall/deploy-mario-docker-image-on-azure-k8s-using-argocd-gitops-repo.git
        run: |
          set -euo pipefail

          # Always rebase on remote to avoid non-fast-forward pushes
          git pull --rebase origin main

          # Update the container image tag in deployment.yaml.
          # Why `sed`? This repo currently stores a plain Kubernetes manifest,
          # not a Helm chart or Kustomize overlay. Changing the tag here is what
          # triggers Argo CD (GitOps) to deploy the *new* image.
          #
          # Pattern explained:
          #   - Match the existing line that begins with `image: monicamarshall/supermario-aks:...`
          #   - Replace everything after ':' with the new ${VERSION}
          #
          # NOTE: This assumes a single container image per line in this file.
          # If the manifest layout changes or you add multiple containers,
          # prefer a structured editor like `yq` instead of sed.
          sed -i 's|image: monicamarshall/supermario-aks:.*$|image: monicamarshall/supermario-aks:'"${VERSION}"'|' deployment.yaml
          
          # Record the version we deployed (handy for audits & dashboards)
          echo "${VERSION}" > version.txt
          
          # Only commit if files actually changed (avoids empty commits)
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git add deployment.yaml version.txt
          git commit -m "Bump image tag to ${VERSION}"
          git push "${PUSH_URL}" HEAD:main

      
